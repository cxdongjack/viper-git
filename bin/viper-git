#!/bin/bash

# feat：新功能（feature）
# opt：优化（optimization）
# fix：修补bug
# docs：文档（documentation）
# style： 格式（不影响代码运行的变动）
# refactor：重构（即不是新增功能，也不是修改bug的代码变动）
# test：增加测试
# chore：构建过程或辅助工具的变动

[[ $# -lt 1 ]] && echo "Usage: $0 (dev|sync|hotfix|alpha|publish)" && exit

cmd=${1}

case "$cmd" in
    dev)
        [[ $# -ne 3 ]] && echo "Usage: $0 dev <type> <usage>" && exit

        echo '从master分支创建新的开发分支'
        git checkout master
        git pull
        git checkout -b "$2-$3"
        ;;
    sync)
        echo '和master分支保持同步, 进入rebase界面'
        git fetch
        git rebase -i origin/master
        echo '请用git push -f与远程分支同步'
        echo '之后可以去git.n.xiaomi.com发一个到master的merge rquest了'
        ;;
    hotfix)
        [[ $# -ne 1 ]] && echo "Usage: $0 hotfix" && exit
        echo '从上次deploy分支创建新的hotfix分支'
        git checkout deploy
        git pull
        # find hash in last commit
        # %s: subject
        # %f: sanitized subject line, suitable for a filename
        # %b: body
        # %B: raw body (unwrapped subject and body)
        hash=`git log -1 --pretty=format:%b | grep 'from:' | awk '{print $2}' | head -1`
        git checkout -B hotfix $hash
        git push -f --set-upstream origin hotfix
        ;;
    alpha)
        [[ $# -ne 1 ]] && echo "Usage: $0 alpha" && exit

        if [[ -n "$(git status --porcelain)" ]]
        then
            echo "发布alpha时不能有未提交的修改";
            exit
        fi

        branch=`git rev-parse --abbrev-ref HEAD`
        HEAD=`git rev-parse HEAD`
        alpha=deploy-alpha
        msg=`git log -1 --pretty=%B`

        # 将开发分支与源同步
        git push -f --set-upstream origin $branch

        echo "---> make开始"
        make
        echo "---> make结束, commit开始"

        git checkout $alpha
        git pull
        ./xbox.sh
        git add -A
        git commit -m "$msg"

        # Nothing to commit
        if [ $? -ne 0 ]
        then
            echo "没有更改需要进行alpha测试"
            git checkout $branch
            exit
        fi

        git filter-branch -f --msg-filter "sed '\$a\\\n ______!!!请勿修改以下内容______\nfrom: ${HEAD}'" HEAD^..HEAD
        echo "---> commit结束"
        read -p "push $alpha? (y/Y)" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            git push -f --set-upstream origin $alpha
        fi

        git checkout $branch
        ;;
    publish)
        [[ $# -ne 1 ]] && echo "Usage: $0 publish" && axit

        # 直接将打包的所有文件从alpha复制到deploy分支，确保所有的diff都正确，简单粗暴
        HEAD=`git rev-parse HEAD`
        REMOTE=`git rev-parse @{u}`

        # 确保本地分支与源同步
        if [[ $HEAD != $REMOTE ]]
        then
            echo "本地分支与源不一致，请先发布alpha！"
            git checkout $branch
            exit
        fi

        alpha=deploy-alpha
        branch=`git rev-parse --abbrev-ref HEAD`
        deploy=deploy

        # 切换到alpha
        git checkout $alpha
        git pull

        # 检查commit hash
        hash=`git log -1 --pretty=format:%b | grep 'from:' | awk '{print $2}' | head -1`
        if [[ $hash == '' ]]
        then
            echo "出错了！commit hash不存在"
            git checkout $branch
            exit
        fi

        # 检查发布分支
        if [[ $HEAD != $hash ]]
        then
            echo "只有进行过最新一次的alpha才能publish"
            git checkout $branch
            exit
        fi

        msg=`git log -1 --pretty=%B`
        rm -rf .git/__temp
        cp -r xbox/release .git/__temp

        # 切换到deploy
        git checkout $deploy
        git pull
        mkdir -p xbox
        rm -rf xbox/release
        cp -r .git/__temp xbox/release 
        rm -rf .git/__temp

        # commit
        git add -A
        git commit -m "$msg"
        git commit --amend --verbose

        read -p "push $deploy and merge to master? (y/Y)" -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]
        then
            git push -f --set-upstream origin $deploy
        else
            exit
        fi

        # Merge发布分支
        # 为了避免多出一个merge commit，用一个临时分支来做rebase
        temp=temp-master-merge
        git checkout -B $temp $hash
        git rebase master
        git checkout master
        git merge --ff-only $temp
        git branch -D $temp
        git push
        ;;
    *)
        echo "无效命令 $cmd"
        ;;
esac
